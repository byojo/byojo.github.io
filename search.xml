<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<a id="more"></a>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2020/08/03/%E4%B8%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<p>//给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。<br>//<br>//<br>//<br>// 提示：<br>//<br>//<br>// num1 和num2 的长度都小于 5100<br>// num1 和num2 都只包含数字 0-9<br>// num1 和num2 都不包含任何前导零<br>// 你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式<br>//<br>// Related Topics 字符串</p>
<p>class Solution {<br>    public String addStrings(String num1, String num2) {<br>        int index1 = num1.length() - 1;<br>        int index2 = num2.length() - 1;<br>        int add = 0;<br>        StringBuffer stringBuffer = new StringBuffer();<br>        while (index1 &gt;= 0 || index2 &gt;= 0 || add != 0) {<br>            int x = index1 &gt;= 0 ? num1.charAt(index1) - ‘0’ : 0;<br>            int y = index2 &gt;= 0 ? num2.charAt(index2) - ‘0’ : 0;<br>            int target = x + y + add;<br>            stringBuffer.append(target%10);<br>            add = target / 10;<br>            index1–;<br>            index2–;<br>        }<br>        stringBuffer.reverse();<br>        return stringBuffer.toString();<br>    }<br>}</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>每日算法--课程表</title>
    <url>/2020/08/04/%E8%AF%BE%E7%A8%8B%E8%A1%A8/</url>
    <content><![CDATA[<a id="more"></a>
<p>//你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。<br>//<br>// 在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]<br>//<br>// 给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？<br>//<br>//<br>//<br>// 示例 1:<br>//<br>// 输入: 2, [[1,0]]<br>//输出: true<br>//解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。<br>//<br>// 示例 2:<br>//<br>// 输入: 2, [[1,0],[0,1]]<br>//输出: false<br>//解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。<br>//<br>//<br>//<br>// 提示：<br>//<br>//<br>// 输入的先决条件是由 边缘列表 表示的图形，而不是 邻接矩阵 。详情请参见图的表示法。<br>// 你可以假定输入的先决条件中没有重复的边。<br>// 1 &lt;= numCourses &lt;= 10^5<br>//<br>// Related Topics 深度优先搜索 广度优先搜索 图 拓扑排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean canFinish(int numCourses, int[][] prerequisites) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; edges;</span><br><span class="line">        int[] indeg;</span><br><span class="line"></span><br><span class="line">        public boolean canFinish(int numCourses, int[][] prerequisites) &#123;</span><br><span class="line">            edges &#x3D; new ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">            for (int i &#x3D; 0; i &lt; numCourses; ++i) &#123;</span><br><span class="line">                edges.add(new ArrayList&lt;Integer&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            indeg &#x3D; new int[numCourses];</span><br><span class="line">            for (int[] info : prerequisites) &#123;</span><br><span class="line">                edges.get(info[1]).add(info[0]);</span><br><span class="line">                ++indeg[info[0]];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Queue&lt;Integer&gt; queue &#x3D; new LinkedList&lt;Integer&gt;();</span><br><span class="line">            for (int i &#x3D; 0; i &lt; numCourses; ++i) &#123;</span><br><span class="line">                if (indeg[i] &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                    queue.offer(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int visited &#x3D; 0;</span><br><span class="line">            while (!queue.isEmpty()) &#123;</span><br><span class="line">                ++visited;</span><br><span class="line">                int u &#x3D; queue.poll();</span><br><span class="line">                for (int v: edges.get(u)) &#123;</span><br><span class="line">                    --indeg[v];</span><br><span class="line">                    if (indeg[v] &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                        queue.offer(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return visited &#x3D;&#x3D; numCourses;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>并发</tag>
        <tag>线程</tag>
      </tags>
  </entry>
</search>
